openapi: 3.1.0
info:
  title: Onyxia services API for a region
  description: Onyxia services API is responsible to provide service catalog and to run, modify delete services
  version: 0.0.0

security:
  - oidc: []
tags:
  - name: services
    description: Service lifecycle (install)
  - name: events
    description: Event streams (SSE)
paths:
  /services/{releaseId}/install:
    put:
      tags: [services]
      operationId: installService
      summary: Trigger service installation (async)
      description: >
        Starts an install for the given releaseId. Returns 202 with URLs for SSE streams.
        Idempotent if the release already exists (returns 202 with same event URLs).
      parameters:
        - $ref: "#/components/parameters/releaseId"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ServiceInstallRequest"
            examples:
              jupyter:
                value:
                  chart: jupyter-python
                  repoUrl: https://inseefrlab.github.io/helm-charts-interactive-services
                  version: ""
                  values:
                    ingress:
                      enabled: true
                      hostname: user-xxxx.user.lab.sspcloud.fr
      responses:
        "202":
          description: Accepted â€“ installation running
          headers:
            Location:
              description: Canonical location for watch release stream
              schema: { type: string, format: uri-reference }
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InstallAccepted"
              examples:
                default:
                  value:
                    eventsUrl:
                      release: /events/jupyter-python-626146/watch-release
                      resources: /events/jupyter-python-626146/watch-resources
        "400":
          description: Bad request
          content:
            application/problem+json:
              schema: { $ref: "#/components/schemas/Problem" }
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
          content:
            application/problem+json:
              schema: { $ref: "#/components/schemas/Problem" }
        "409":
          description: Conflict another install already exists with the same releaseId
          content:
            application/problem+json:
              schema: { $ref: "#/components/schemas/Problem" }
        "500":
          description: Internal error
          content:
            application/problem+json:
              schema: { $ref: "#/components/schemas/Problem" }
  /events/{releaseId}/watch-release:
    get:
      tags: [events]
      operationId: watchRelease
      summary: Release-level status stream (SSE)
      description: >
        Server-Sent Events (text/event-stream).
        Emits: "status", "log" (optional), and "done".
      parameters:
        - $ref: "#/components/parameters/releaseId"
        - $ref: "#/components/parameters/lastEventId"
      responses:
        "200":
          description: SSE stream
          headers:
            Cache-Control: { schema: { type: string }, description: no-cache }
            Connection: { schema: { type: string }, description: keep-alive }
          content:
            text/event-stream:
              schema:
                type: string
                x-oas-doc-schema:
                  $ref: "#/components/schemas/SSEFrameRelease"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Unknown releaseId
          content:
            application/problem+json:
              schema: { $ref: "#/components/schemas/Problem" }
  /events/{releaseId}/watch-resources:
    get:
      tags: [events]
      operationId: watchResources
      summary: Kubernetes resources status stream (SSE)
      description: >
        Server-Sent Events (text/event-stream).
        Filters resources by labelSelector: app.kubernetes.io/instance={releaseId}.
        Emits: "resource" (add/update/delete), "progress" (aggregated readiness), "done".
      parameters:
        - $ref: "#/components/parameters/releaseId"
        - $ref: "#/components/parameters/lastEventId"
      responses:
        "200":
          description: SSE stream
          headers:
            Cache-Control: { schema: { type: string }, description: no-cache }
            Connection: { schema: { type: string }, description: keep-alive }
          content:
            text/event-stream:
              schema:
                type: string
                x-oas-doc-schema:
                  $ref: "#/components/schemas/SSEFrameResources"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Unknown releaseId
          content:
            application/problem+json:
              schema: { $ref: "#/components/schemas/Problem" }
components:
  parameters:
    releaseId:
      in: path
      name: releaseId
      required: true
      schema:
        type: string
        minLength: 1
        pattern: "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
      description: Logical release identifier
    lastEventId:
      in: header
      name: Last-Event-Id
      required: false
      schema: { type: string }
      description: Resume SSE from a specific event id (client reconnection)
  schemas:
    ServiceInstallRequest:
      type: object
      required: [chart]
      properties:
        chart:
          type: string
          description: Chart name or OCI ref (e.g., oci://registry-1.docker.io/bitnamicharts/nginx)
        repoUrl:
          type: string
          format: uri
          description: Chart repository URL (not required for OCI)
        version:
          type: string
          description: Chart version (empty for latest)
        values:
          type: object
          additionalProperties: true
          description: Helm values override
    InstallAccepted:
      type: object
      required: [eventsUrl]
      properties:
        eventsUrl:
          type: object
          required: [release, resources]
          properties:
            release:
              type: string
              example: /events/jupyter-python-626146/watch-release
            resources:
              type: string
              example: /events/jupyter-python-626146/watch-resources
    SSEFrameRelease:
      type: object
      required: [event, data]
      properties:
        id:
          type: string
          description: Optional event id for Last-Event-ID resume.
        event:
          type: string
          description: Release stream event name
          enum: [status, log, done]
        data:
          $ref: "#/components/schemas/ReleaseEventData"
      description: >
        Wire format per frame:
        "id: <id>\n" (optional) + "event: <event>\n" + "data: <JSON(data)>\n\n".
    ReleaseEventData:
      type: object
      description: >
        Payload for /watch-release events. Fields present depend on `event`:
        - status: generic connection/heartbeat messages
        - phase/revision: release status
        - msg: optional log line
        - error: error when terminal status=failed
      properties:
        status:
          type: string
          description: Free-form status (e.g., "connected", "heartbeat").
        phase:
          type: string
          enum:
            [
              pending,
              installing,
              upgrading,
              deployed,
              failed,
              uninstalling,
              deleted,
              unknown,
            ]
        revision:
          type: integer
          minimum: 1
          description: Release revision if known.
        msg:
          type: string
          description: Optional log line (for `event=log`).
        error:
          type: string
          description: Error message when terminal status is failed.
    SSEFrameResources:
      type: object
      required: [event, data]
      properties:
        id:
          type: string
          description: Optional event id for Last-Event-ID resume.
        event:
          type: string
          description: Resources stream event name
          enum: [status, resource, progress, done]
        data:
          $ref: "#/components/schemas/ResourcesEventData"
      description: >
        Wire format per frame:
        "id: <id>\n" (optional) + "event: <event>\n" + "data: <JSON(data)>\n\n".

    ResourcesEventData:
      type: object
      description: >
        Payload for /watch-resources events. Fields present depend on `event`:
        - status: generic connection/heartbeat
        - kind/name/namespace/action: per-resource change (add/update/delete)
        - *Ready/*Total counters: aggregated readiness
        - done/failed/message/summary: terminal/summary information
      properties:
        # generic
        status:
          type: string
          description: Free-form status (e.g., "connected", "heartbeat").
        # per-resource event
        kind: { type: string, example: Pod }
        name: { type: string }
        namespace: { type: string }
        action: { type: string, enum: [add, update, delete] }
        # aggregated progress
        podsReady: { type: integer, minimum: 0 }
        podsTotal: { type: integer, minimum: 0 }
        jobsComplete: { type: integer, minimum: 0 }
        jobsTotal: { type: integer, minimum: 0 }
        deploymentsReady: { type: integer, minimum: 0 }
        deploymentsTotal: { type: integer, minimum: 0 }
        statefulSetsReady: { type: integer, minimum: 0 }
        statefulSetsTotal: { type: integer, minimum: 0 }
        daemonSetsReady: { type: integer, minimum: 0 }
        daemonSetsTotal: { type: integer, minimum: 0 }
        message:
          type: string
          description: Optional human-readable summary.
        # terminal hints
        done: { type: boolean }
        failed: { type: boolean }
        error: { type: string }

    Problem:
      type: object
      properties:
        type: { type: string, format: uri }
        title: { type: string }
        status: { type: integer }
        detail: { type: string }
        instance: { type: string }
      additionalProperties: true
  securitySchemes:
    oidc:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: "https://auth.lab.sspcloud.fr/auth/realms/sspcloud/protocol/openid-connect/auth"
          tokenUrl: https://auth.lab.sspcloud.fr/auth/realms/sspcloud/protocol/openid-connect/token
          scopes: {}
