openapi: 3.1.0
info:
  title: Onyxia services API for a region
  description: >
    Onyxia services API is responsible to provide service catalog and to run,
    modify and delete services.
  version: 0.0.0

security:
  - oidc: []

tags:
  - name: services
    description: Service lifecycle (install)
  - name: events
    description: Event streams (SSE)
  - name: catalogs
    description: Service catalogs

paths:
  /catalogs/{catalogId}/packages/{packageName}:
    get:
      security:
        - oidc: []
      tags: [catalogs]
      operationId: getMyPackage
      summary: Get detailed information about a package in a catalog
      description: >
        Returns detailed information about a package in a catalog, including
        available versions.
      parameters:
        - name: catalogId
          in: path
          required: true
          schema: { type: string }
          description: Catalog identifier
        - name: packageName
          in: path
          required: true
          schema: { type: string }
          description: Package name
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { $ref: "#/components/schemas/DetailedPackage" }
        "404":
          $ref: "#/components/responses/NotFound"
        "500":
          $ref: "#/components/responses/InternalError"

  /schemas/{catalogId}/packageName/{packageName}/versions/{version}:
    get:
      security:
        - oidc: []
      summary: Get the values.schema.json of a versioned package
      description: >
        Returns the values.schema.json of a versioned package. The schema is
        enhanced by user permissions and roles.
      parameters:
        - name: catalogId
          in: path
          required: true
          schema: { type: string }
          description: Catalog identifier
        - name: packageName
          in: path
          required: true
          schema: { type: string }
          description: Package name
        - name: version
          in: path
          required: true
          schema:
            type: string
            format: semver
          description: Package version (semver)
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema: { type: object, additionalProperties: true }
        "400":
          $ref: "#/components/responses/BadRequest"
        "500":
          $ref: "#/components/responses/InternalError"

  /catalogs:
    get:
      security:
        - {}
        - oidc: []
      tags: [catalogs]
      operationId: getMyCatalogs
      summary: List available catalogs and packages for installing for the user
      description: >
        Returns the list of catalogs and packages available for the user.
        The list of packages is filtered by user permissions if the user is
        authenticated. Otherwise returns the public catalog.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items: { $ref: "#/components/schemas/Catalog" }
        "500":
          $ref: "#/components/responses/InternalError"

  /{releaseId}/install:
    put:
      tags: [services]
      operationId: installService
      summary: Trigger service installation (async)
      description: >
        Starts an install for the given releaseId. Returns 202 with URLs for SSE
        streams. Idempotent if the release already exists (returns 202 with the
        same event URLs).
      parameters:
        - $ref: "#/components/parameters/releaseId"
        - name: X-Onyxia-Project
          in: header
          required: false
          schema: { type: string }
          description: Project identifier in Onyxia
      requestBody:
        required: true
        content:
          application/json:
            schema: { $ref: "#/components/schemas/ServiceInstallRequest" }
            examples:
              jupyter:
                value:
                  chart: jupyter-python
                  repoUrl: https://inseefrlab.github.io/helm-charts-interactive-services
                  version: ""
                  values:
                    ingress:
                      enabled: true
                      hostname: user-xxxx.user.lab.sspcloud.fr
      responses:
        "202":
          description: Accepted – installation running
          headers:
            Location:
              description: Canonical location for watch release stream
              schema: { type: string, format: uri-reference }
          content:
            application/json:
              schema: { $ref: "#/components/schemas/InstallAccepted" }
              examples:
                default:
                  value:
                    eventsUrl:
                      release: /events/jupyter-python-626146/watch-release
                      resources: /events/jupyter-python-626146/watch-resources
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "409":
          $ref: "#/components/responses/Conflict"
        "500":
          $ref: "#/components/responses/InternalError"

  /events/{releaseId}/watch-release:
    get:
      tags: [events]
      operationId: watchRelease
      summary: Release-level status stream (SSE)
      description: >
        Server-Sent Events (text/event-stream).
        Emits: "status", "log" (optional), and "done".
      parameters:
        - $ref: "#/components/parameters/releaseId"
        - $ref: "#/components/parameters/lastEventId"
      responses:
        "200":
          description: SSE stream
          headers:
            Cache-Control: { schema: { type: string }, description: no-cache }
            Connection: { schema: { type: string }, description: keep-alive }
          content:
            text/event-stream:
              schema:
                type: string
                x-oas-doc-schema:
                  $ref: "#/components/schemas/SSEFrameRelease"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"

  /events/{releaseId}/watch-resources:
    get:
      tags: [events]
      operationId: watchResources
      summary: Kubernetes resources status stream (SSE)
      description: >
        Server-Sent Events (text/event-stream). Filters resources by
        labelSelector: app.kubernetes.io/instance={releaseId}. Emits: "resource"
        (add/update/delete), "progress" (aggregated readiness), "done".
      parameters:
        - $ref: "#/components/parameters/releaseId"
        - $ref: "#/components/parameters/lastEventId"
      responses:
        "200":
          description: SSE stream
          headers:
            Cache-Control: { schema: { type: string }, description: no-cache }
            Connection: { schema: { type: string }, description: keep-alive }
          content:
            text/event-stream:
              schema:
                type: string
                x-oas-doc-schema:
                  $ref: "#/components/schemas/SSEFrameResources"
        "401":
          $ref: "#/components/responses/Unauthorized"
        "403":
          $ref: "#/components/responses/Forbidden"
        "404":
          $ref: "#/components/responses/NotFound"

components:
  parameters:
    releaseId:
      in: path
      name: releaseId
      required: true
      schema:
        type: string
        minLength: 1
        pattern: "^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"
      description: Logical release identifier
    lastEventId:
      in: header
      name: Last-Event-Id
      required: false
      schema: { type: string }
      description: Resume SSE from a specific event id (client reconnection)

  responses:
    BadRequest:
      description: Bad request
      content:
        application/problem+json:
          schema: { $ref: "#/components/schemas/Problem" }
    Unauthorized:
      description: Unauthorized
      content:
        application/problem+json:
          schema: { $ref: "#/components/schemas/Problem" }
    Forbidden:
      description: Forbidden
      content:
        application/problem+json:
          schema: { $ref: "#/components/schemas/Problem" }
    NotFound:
      description: Resource not found
      content:
        application/problem+json:
          schema: { $ref: "#/components/schemas/Problem" }
    Conflict:
      description: Conflict — resource already exists or operation already running
      content:
        application/problem+json:
          schema: { $ref: "#/components/schemas/Problem" }
    InternalError:
      description: Internal server error
      content:
        application/problem+json:
          schema: { $ref: "#/components/schemas/Problem" }

  schemas:
    Catalog:
      type: object
      required: [id, name, packages]
      properties:
        id: { type: string, description: Catalog id }
        name:
          $ref: "#/components/schemas/LocalizedString"
          description: The name of the catalog
        description:
          $ref: "#/components/schemas/LocalizedString"
          description: The description of the catalog
        status:
          type: string
          enum: [PROD, TEST]
          description: Is the catalog a test or a production catalog
        highlightedPackages:
          type: array
          description: Names of important packages of the catalog to highlight in the UI
          items: { type: string }
        visible:
          type: object
          required: [user, project]
          description: Describes if the catalog is visible in user or project context
          properties:
            user:
              type: boolean
              description: Should this catalog be visible in user context?
            project:
              type: boolean
              description: Should this catalog be visible in project context?
        packages:
          type: array
          description: List of packages available in the catalog
          items: { $ref: "#/components/schemas/Package" }

    Package:
      type: object
      required: [name, icon]
      properties:
        name: { type: string, description: Package name }
        description:
          { type: string, description: The description of the package }
        icon: { type: string, format: uri, description: URL to an icon }
        home: { type: string, format: uri, description: URL to the home page }

    DetailedPackage:
      allOf:
        - $ref: "#/components/schemas/Package"
        - type: object
          required: [versions]
          properties:
            versions:
              type: array
              description: List of versions available for the package
              items:
                type: object
                required: [version]
                properties:
                  version:
                    type: string
                    format: semver
                    description: Version string of the Helm chart

    ServiceInstallRequest:
      type: object
      required: [packageName, options, catalogId, name]
      properties:
        catalogId:
          {
            type: string,
            description: Catalog where the package is taken from.,
          }
        packageName:
          {
            type: string,
            description: Package name used to create the service.,
          }
        packageVersion:
          {
            type: string,
            format: semver,
            description: Version of the Helm package.,
          }
        version:
          { type: string, description: Chart version (empty for latest). }
        options:
          {
            type: object,
            additionalProperties: true,
            description: Options of package (values.yaml for Helm).,
          }
        share:
          {
            type: boolean,
            default: false,
            description: When true,
            visible to all users of the namespace.,
          }
        friendlyName:
          { type: string, description: Friendly name for the service. }
        name: { type: string, description: A chosen name for the service. }

    InstallAccepted:
      type: object
      required: [eventsUrl]
      properties:
        eventsUrl:
          type: object
          required: [release, resources]
          properties:
            release:
              {
                type: string,
                example: /events/jupyter-python-626146/watch-release,
              }
            resources:
              {
                type: string,
                example: /events/jupyter-python-626146/watch-resources,
              }

    SSEFrameRelease:
      type: object
      required: [event, data]
      properties:
        id:
          {
            type: string,
            description: Optional event id for Last-Event-ID resume.,
          }
        event:
          type: string
          description: Release stream event name
          enum: [status, log, done]
        data: { $ref: "#/components/schemas/ReleaseEventData" }
      description: >
        Wire format per frame:
        "id: <id>\n" (optional) + "event: <event>\n" + "data: <JSON(data)>\n\n".

    ReleaseEventData:
      type: object
      description: >
        Payload for /watch-release events.
      properties:
        status: { type: string, description: Free-form status. }
        phase:
          type: string
          enum:
            [
              pending,
              installing,
              upgrading,
              deployed,
              failed,
              uninstalling,
              deleted,
              unknown,
            ]
        revision: { type: integer, minimum: 1 }
        msg: { type: string }
        error: { type: string }

    SSEFrameResources:
      type: object
      required: [event, data]
      properties:
        id: { type: string }
        event:
          type: string
          enum: [status, resource, progress, done]
        data: { $ref: "#/components/schemas/ResourcesEventData" }

    ResourcesEventData:
      type: object
      properties:
        status: { type: string }
        kind: { type: string, example: Pod }
        name: { type: string }
        namespace: { type: string }
        action: { type: string, enum: [add, update, delete] }
        podsReady: { type: integer, minimum: 0 }
        podsTotal: { type: integer, minimum: 0 }
        jobsComplete: { type: integer, minimum: 0 }
        jobsTotal: { type: integer, minimum: 0 }
        deploymentsReady: { type: integer, minimum: 0 }
        deploymentsTotal: { type: integer, minimum: 0 }
        statefulSetsReady: { type: integer, minimum: 0 }
        statefulSetsTotal: { type: integer, minimum: 0 }
        daemonSetsReady: { type: integer, minimum: 0 }
        daemonSetsTotal: { type: integer, minimum: 0 }
        message: { type: string }
        done: { type: boolean }
        failed: { type: boolean }
        error: { type: string }

    LocalizedString:
      description: A string or a map of localized strings by language code
      oneOf:
        - type: string
        - type: object
          additionalProperties: { type: string }
          properties:
            en: { type: string }
            fr: { type: string }
            zh-CN: { type: string }
            no: { type: string }
            fi: { type: string }
            nl: { type: string }
            it: { type: string }
            es: { type: string }
            de: { type: string }
          example:
            en: "Hello"
            fr: "Bonjour"

    Problem:
      type: object
      properties:
        type: { type: string, format: uri }
        title: { type: string }
        status: { type: integer }
        detail: { type: string }
        instance: { type: string }
      additionalProperties: true

  securitySchemes:
    oidc:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: "https://auth.lab.sspcloud.fr/auth/realms/sspcloud/protocol/openid-connect/auth"
          tokenUrl: https://auth.lab.sspcloud.fr/auth/realms/sspcloud/protocol/openid-connect/token
          scopes: {}
