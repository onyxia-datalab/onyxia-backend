// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"
	"net/url"
	"strings"

	"github.com/ogen-go/ogen/uri"
)

func (s *Server) cutPrefix(path string) (string, bool) {
	prefix := s.cfg.Prefix
	if prefix == "" {
		return path, true
	}
	if !strings.HasPrefix(path, prefix) {
		// Prefix doesn't match.
		return "", false
	}
	// Cut prefix from the path.
	return strings.TrimPrefix(path, prefix), true
}

// ServeHTTP serves http request as defined by OpenAPI v3 specification,
// calling handler that matches the path or returning not found error.
func (s *Server) ServeHTTP(w http.ResponseWriter, r *http.Request) {
	elem := r.URL.Path
	elemIsEscaped := false
	if rawPath := r.URL.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
			elemIsEscaped = strings.ContainsRune(elem, '%')
		}
	}

	elem, ok := s.cutPrefix(elem)
	if !ok || len(elem) == 0 {
		s.notFound(w, r)
		return
	}
	args := [3]string{}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/api/services/"

			if l := len("/api/services/"); len(elem) >= l && elem[0:l] == "/api/services/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'c': // Prefix: "catalogs"
				origElem := elem
				if l := len("catalogs"); len(elem) >= l && elem[0:l] == "catalogs" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch r.Method {
					case "GET":
						s.handleGetMyCatalogsRequest([0]string{}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "GET")
					}

					return
				}
				switch elem[0] {
				case '/': // Prefix: "/"

					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "catalogId"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case '/': // Prefix: "/packages/"

						if l := len("/packages/"); len(elem) >= l && elem[0:l] == "/packages/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "packageName"
						// Leaf parameter, slashes are prohibited
						idx := strings.IndexByte(elem, '/')
						if idx >= 0 {
							break
						}
						args[1] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleGetMyPackageRequest([2]string{
									args[0],
									args[1],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}

					}

				}

				elem = origElem
			case 'e': // Prefix: "events/"
				origElem := elem
				if l := len("events/"); len(elem) >= l && elem[0:l] == "events/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "releaseId"
				// Match until "/"
				idx := strings.IndexByte(elem, '/')
				if idx < 0 {
					idx = len(elem)
				}
				args[0] = elem[:idx]
				elem = elem[idx:]

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case '/': // Prefix: "/watch-re"

					if l := len("/watch-re"); len(elem) >= l && elem[0:l] == "/watch-re" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'l': // Prefix: "lease"

						if l := len("lease"); len(elem) >= l && elem[0:l] == "lease" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleWatchReleaseRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}

					case 's': // Prefix: "sources"

						if l := len("sources"); len(elem) >= l && elem[0:l] == "sources" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleWatchResourcesRequest([1]string{
									args[0],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}

					}

				}

				elem = origElem
			case 's': // Prefix: "schemas/"
				origElem := elem
				if l := len("schemas/"); len(elem) >= l && elem[0:l] == "schemas/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "catalogId"
				// Match until "/"
				idx := strings.IndexByte(elem, '/')
				if idx < 0 {
					idx = len(elem)
				}
				args[0] = elem[:idx]
				elem = elem[idx:]

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case '/': // Prefix: "/packageName/"

					if l := len("/packageName/"); len(elem) >= l && elem[0:l] == "/packageName/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "packageName"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[1] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case '/': // Prefix: "/versions/"

						if l := len("/versions/"); len(elem) >= l && elem[0:l] == "/versions/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "version"
						// Leaf parameter, slashes are prohibited
						idx := strings.IndexByte(elem, '/')
						if idx >= 0 {
							break
						}
						args[2] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch r.Method {
							case "GET":
								s.handleAPIServicesSchemasCatalogIdPackageNamePackageNameVersionsVersionGetRequest([3]string{
									args[0],
									args[1],
									args[2],
								}, elemIsEscaped, w, r)
							default:
								s.notAllowed(w, r, "GET")
							}

							return
						}

					}

				}

				elem = origElem
			}
			// Param: "releaseId"
			// Match until "/"
			idx := strings.IndexByte(elem, '/')
			if idx < 0 {
				idx = len(elem)
			}
			args[0] = elem[:idx]
			elem = elem[idx:]

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case '/': // Prefix: "/install"

				if l := len("/install"); len(elem) >= l && elem[0:l] == "/install" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch r.Method {
					case "PUT":
						s.handleInstallServiceRequest([1]string{
							args[0],
						}, elemIsEscaped, w, r)
					default:
						s.notAllowed(w, r, "PUT")
					}

					return
				}

			}

		}
	}
	s.notFound(w, r)
}

// Route is route object.
type Route struct {
	name        string
	summary     string
	operationID string
	pathPattern string
	count       int
	args        [3]string
}

// Name returns ogen operation name.
//
// It is guaranteed to be unique and not empty.
func (r Route) Name() string {
	return r.name
}

// Summary returns OpenAPI summary.
func (r Route) Summary() string {
	return r.summary
}

// OperationID returns OpenAPI operationId.
func (r Route) OperationID() string {
	return r.operationID
}

// PathPattern returns OpenAPI path.
func (r Route) PathPattern() string {
	return r.pathPattern
}

// Args returns parsed arguments.
func (r Route) Args() []string {
	return r.args[:r.count]
}

// FindRoute finds Route for given method and path.
//
// Note: this method does not unescape path or handle reserved characters in path properly. Use FindPath instead.
func (s *Server) FindRoute(method, path string) (Route, bool) {
	return s.FindPath(method, &url.URL{Path: path})
}

// FindPath finds Route for given method and URL.
func (s *Server) FindPath(method string, u *url.URL) (r Route, _ bool) {
	var (
		elem = u.Path
		args = r.args
	)
	if rawPath := u.RawPath; rawPath != "" {
		if normalized, ok := uri.NormalizeEscapedPath(rawPath); ok {
			elem = normalized
		}
		defer func() {
			for i, arg := range r.args[:r.count] {
				if unescaped, err := url.PathUnescape(arg); err == nil {
					r.args[i] = unescaped
				}
			}
		}()
	}

	elem, ok := s.cutPrefix(elem)
	if !ok {
		return r, false
	}

	// Static code generated router with unwrapped path search.
	switch {
	default:
		if len(elem) == 0 {
			break
		}
		switch elem[0] {
		case '/': // Prefix: "/api/services/"

			if l := len("/api/services/"); len(elem) >= l && elem[0:l] == "/api/services/" {
				elem = elem[l:]
			} else {
				break
			}

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case 'c': // Prefix: "catalogs"
				origElem := elem
				if l := len("catalogs"); len(elem) >= l && elem[0:l] == "catalogs" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					switch method {
					case "GET":
						r.name = GetMyCatalogsOperation
						r.summary = "List available catalogs and packages for installing for the user"
						r.operationID = "getMyCatalogs"
						r.pathPattern = "/api/services/catalogs"
						r.args = args
						r.count = 0
						return r, true
					default:
						return
					}
				}
				switch elem[0] {
				case '/': // Prefix: "/"

					if l := len("/"); len(elem) >= l && elem[0:l] == "/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "catalogId"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[0] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case '/': // Prefix: "/packages/"

						if l := len("/packages/"); len(elem) >= l && elem[0:l] == "/packages/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "packageName"
						// Leaf parameter, slashes are prohibited
						idx := strings.IndexByte(elem, '/')
						if idx >= 0 {
							break
						}
						args[1] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = GetMyPackageOperation
								r.summary = "Get detailed information about a package in a catalog"
								r.operationID = "getMyPackage"
								r.pathPattern = "/api/services/catalogs/{catalogId}/packages/{packageName}"
								r.args = args
								r.count = 2
								return r, true
							default:
								return
							}
						}

					}

				}

				elem = origElem
			case 'e': // Prefix: "events/"
				origElem := elem
				if l := len("events/"); len(elem) >= l && elem[0:l] == "events/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "releaseId"
				// Match until "/"
				idx := strings.IndexByte(elem, '/')
				if idx < 0 {
					idx = len(elem)
				}
				args[0] = elem[:idx]
				elem = elem[idx:]

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case '/': // Prefix: "/watch-re"

					if l := len("/watch-re"); len(elem) >= l && elem[0:l] == "/watch-re" {
						elem = elem[l:]
					} else {
						break
					}

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case 'l': // Prefix: "lease"

						if l := len("lease"); len(elem) >= l && elem[0:l] == "lease" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = WatchReleaseOperation
								r.summary = "Release-level status stream (SSE)"
								r.operationID = "watchRelease"
								r.pathPattern = "/api/services/events/{releaseId}/watch-release"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}

					case 's': // Prefix: "sources"

						if l := len("sources"); len(elem) >= l && elem[0:l] == "sources" {
							elem = elem[l:]
						} else {
							break
						}

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = WatchResourcesOperation
								r.summary = "Kubernetes resources status stream (SSE)"
								r.operationID = "watchResources"
								r.pathPattern = "/api/services/events/{releaseId}/watch-resources"
								r.args = args
								r.count = 1
								return r, true
							default:
								return
							}
						}

					}

				}

				elem = origElem
			case 's': // Prefix: "schemas/"
				origElem := elem
				if l := len("schemas/"); len(elem) >= l && elem[0:l] == "schemas/" {
					elem = elem[l:]
				} else {
					break
				}

				// Param: "catalogId"
				// Match until "/"
				idx := strings.IndexByte(elem, '/')
				if idx < 0 {
					idx = len(elem)
				}
				args[0] = elem[:idx]
				elem = elem[idx:]

				if len(elem) == 0 {
					break
				}
				switch elem[0] {
				case '/': // Prefix: "/packageName/"

					if l := len("/packageName/"); len(elem) >= l && elem[0:l] == "/packageName/" {
						elem = elem[l:]
					} else {
						break
					}

					// Param: "packageName"
					// Match until "/"
					idx := strings.IndexByte(elem, '/')
					if idx < 0 {
						idx = len(elem)
					}
					args[1] = elem[:idx]
					elem = elem[idx:]

					if len(elem) == 0 {
						break
					}
					switch elem[0] {
					case '/': // Prefix: "/versions/"

						if l := len("/versions/"); len(elem) >= l && elem[0:l] == "/versions/" {
							elem = elem[l:]
						} else {
							break
						}

						// Param: "version"
						// Leaf parameter, slashes are prohibited
						idx := strings.IndexByte(elem, '/')
						if idx >= 0 {
							break
						}
						args[2] = elem
						elem = ""

						if len(elem) == 0 {
							// Leaf node.
							switch method {
							case "GET":
								r.name = APIServicesSchemasCatalogIdPackageNamePackageNameVersionsVersionGetOperation
								r.summary = "Get the values.schema.json of a versioned package"
								r.operationID = ""
								r.pathPattern = "/api/services/schemas/{catalogId}/packageName/{packageName}/versions/{version}"
								r.args = args
								r.count = 3
								return r, true
							default:
								return
							}
						}

					}

				}

				elem = origElem
			}
			// Param: "releaseId"
			// Match until "/"
			idx := strings.IndexByte(elem, '/')
			if idx < 0 {
				idx = len(elem)
			}
			args[0] = elem[:idx]
			elem = elem[idx:]

			if len(elem) == 0 {
				break
			}
			switch elem[0] {
			case '/': // Prefix: "/install"

				if l := len("/install"); len(elem) >= l && elem[0:l] == "/install" {
					elem = elem[l:]
				} else {
					break
				}

				if len(elem) == 0 {
					// Leaf node.
					switch method {
					case "PUT":
						r.name = InstallServiceOperation
						r.summary = "Trigger service installation (async)"
						r.operationID = "installService"
						r.pathPattern = "/api/services/{releaseId}/install"
						r.args = args
						r.count = 1
						return r, true
					default:
						return
					}
				}

			}

		}
	}
	return r, false
}
