// Code generated by ogen, DO NOT EDIT.

package api

import (
	"io"
	"net/url"

	"github.com/go-faster/jx"
)

// Ref: #/components/schemas/InstallAccepted
type InstallAccepted struct {
	EventsUrl InstallAcceptedEventsUrl `json:"eventsUrl"`
}

// GetEventsUrl returns the value of EventsUrl.
func (s *InstallAccepted) GetEventsUrl() InstallAcceptedEventsUrl {
	return s.EventsUrl
}

// SetEventsUrl sets the value of EventsUrl.
func (s *InstallAccepted) SetEventsUrl(val InstallAcceptedEventsUrl) {
	s.EventsUrl = val
}

type InstallAcceptedEventsUrl struct {
	Release   string `json:"release"`
	Resources string `json:"resources"`
}

// GetRelease returns the value of Release.
func (s *InstallAcceptedEventsUrl) GetRelease() string {
	return s.Release
}

// GetResources returns the value of Resources.
func (s *InstallAcceptedEventsUrl) GetResources() string {
	return s.Resources
}

// SetRelease sets the value of Release.
func (s *InstallAcceptedEventsUrl) SetRelease(val string) {
	s.Release = val
}

// SetResources sets the value of Resources.
func (s *InstallAcceptedEventsUrl) SetResources(val string) {
	s.Resources = val
}

// InstallAcceptedHeaders wraps InstallAccepted with response headers.
type InstallAcceptedHeaders struct {
	Location OptString
	Response InstallAccepted
}

// GetLocation returns the value of Location.
func (s *InstallAcceptedHeaders) GetLocation() OptString {
	return s.Location
}

// GetResponse returns the value of Response.
func (s *InstallAcceptedHeaders) GetResponse() InstallAccepted {
	return s.Response
}

// SetLocation sets the value of Location.
func (s *InstallAcceptedHeaders) SetLocation(val OptString) {
	s.Location = val
}

// SetResponse sets the value of Response.
func (s *InstallAcceptedHeaders) SetResponse(val InstallAccepted) {
	s.Response = val
}

func (*InstallAcceptedHeaders) installServiceRes() {}

type InstallServiceBadRequest Problem

func (*InstallServiceBadRequest) installServiceRes() {}

type InstallServiceConflict Problem

func (*InstallServiceConflict) installServiceRes() {}

type InstallServiceForbidden Problem

func (*InstallServiceForbidden) installServiceRes() {}

type InstallServiceInternalServerError Problem

func (*InstallServiceInternalServerError) installServiceRes() {}

// InstallServiceUnauthorized is response for InstallService operation.
type InstallServiceUnauthorized struct{}

func (*InstallServiceUnauthorized) installServiceRes() {}

type Oidc struct {
	Token  string
	Scopes []string
}

// GetToken returns the value of Token.
func (s *Oidc) GetToken() string {
	return s.Token
}

// GetScopes returns the value of Scopes.
func (s *Oidc) GetScopes() []string {
	return s.Scopes
}

// SetToken sets the value of Token.
func (s *Oidc) SetToken(val string) {
	s.Token = val
}

// SetScopes sets the value of Scopes.
func (s *Oidc) SetScopes(val []string) {
	s.Scopes = val
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptServiceInstallRequestValues returns new OptServiceInstallRequestValues with value set to v.
func NewOptServiceInstallRequestValues(v ServiceInstallRequestValues) OptServiceInstallRequestValues {
	return OptServiceInstallRequestValues{
		Value: v,
		Set:   true,
	}
}

// OptServiceInstallRequestValues is optional ServiceInstallRequestValues.
type OptServiceInstallRequestValues struct {
	Value ServiceInstallRequestValues
	Set   bool
}

// IsSet returns true if OptServiceInstallRequestValues was set.
func (o OptServiceInstallRequestValues) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptServiceInstallRequestValues) Reset() {
	var v ServiceInstallRequestValues
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptServiceInstallRequestValues) SetTo(v ServiceInstallRequestValues) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptServiceInstallRequestValues) Get() (v ServiceInstallRequestValues, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptServiceInstallRequestValues) Or(d ServiceInstallRequestValues) ServiceInstallRequestValues {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptURI returns new OptURI with value set to v.
func NewOptURI(v url.URL) OptURI {
	return OptURI{
		Value: v,
		Set:   true,
	}
}

// OptURI is optional url.URL.
type OptURI struct {
	Value url.URL
	Set   bool
}

// IsSet returns true if OptURI was set.
func (o OptURI) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptURI) Reset() {
	var v url.URL
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptURI) SetTo(v url.URL) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptURI) Get() (v url.URL, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptURI) Or(d url.URL) url.URL {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/Problem
type Problem struct {
	Type            OptURI    `json:"type"`
	Title           OptString `json:"title"`
	Status          OptInt    `json:"status"`
	Detail          OptString `json:"detail"`
	Instance        OptString `json:"instance"`
	AdditionalProps ProblemAdditional
}

// GetType returns the value of Type.
func (s *Problem) GetType() OptURI {
	return s.Type
}

// GetTitle returns the value of Title.
func (s *Problem) GetTitle() OptString {
	return s.Title
}

// GetStatus returns the value of Status.
func (s *Problem) GetStatus() OptInt {
	return s.Status
}

// GetDetail returns the value of Detail.
func (s *Problem) GetDetail() OptString {
	return s.Detail
}

// GetInstance returns the value of Instance.
func (s *Problem) GetInstance() OptString {
	return s.Instance
}

// GetAdditionalProps returns the value of AdditionalProps.
func (s *Problem) GetAdditionalProps() ProblemAdditional {
	return s.AdditionalProps
}

// SetType sets the value of Type.
func (s *Problem) SetType(val OptURI) {
	s.Type = val
}

// SetTitle sets the value of Title.
func (s *Problem) SetTitle(val OptString) {
	s.Title = val
}

// SetStatus sets the value of Status.
func (s *Problem) SetStatus(val OptInt) {
	s.Status = val
}

// SetDetail sets the value of Detail.
func (s *Problem) SetDetail(val OptString) {
	s.Detail = val
}

// SetInstance sets the value of Instance.
func (s *Problem) SetInstance(val OptString) {
	s.Instance = val
}

// SetAdditionalProps sets the value of AdditionalProps.
func (s *Problem) SetAdditionalProps(val ProblemAdditional) {
	s.AdditionalProps = val
}

func (*Problem) watchReleaseRes()   {}
func (*Problem) watchResourcesRes() {}

type ProblemAdditional map[string]jx.Raw

func (s *ProblemAdditional) init() ProblemAdditional {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Ref: #/components/schemas/ServiceInstallRequest
type ServiceInstallRequest struct {
	// Chart name or OCI ref (e.g., oci://registry-1.docker.io/bitnamicharts/nginx).
	Chart string `json:"chart"`
	// Chart repository URL (not required for OCI).
	RepoUrl OptURI `json:"repoUrl"`
	// Chart version (empty for latest).
	Version OptString `json:"version"`
	// Helm values override.
	Values OptServiceInstallRequestValues `json:"values"`
}

// GetChart returns the value of Chart.
func (s *ServiceInstallRequest) GetChart() string {
	return s.Chart
}

// GetRepoUrl returns the value of RepoUrl.
func (s *ServiceInstallRequest) GetRepoUrl() OptURI {
	return s.RepoUrl
}

// GetVersion returns the value of Version.
func (s *ServiceInstallRequest) GetVersion() OptString {
	return s.Version
}

// GetValues returns the value of Values.
func (s *ServiceInstallRequest) GetValues() OptServiceInstallRequestValues {
	return s.Values
}

// SetChart sets the value of Chart.
func (s *ServiceInstallRequest) SetChart(val string) {
	s.Chart = val
}

// SetRepoUrl sets the value of RepoUrl.
func (s *ServiceInstallRequest) SetRepoUrl(val OptURI) {
	s.RepoUrl = val
}

// SetVersion sets the value of Version.
func (s *ServiceInstallRequest) SetVersion(val OptString) {
	s.Version = val
}

// SetValues sets the value of Values.
func (s *ServiceInstallRequest) SetValues(val OptServiceInstallRequestValues) {
	s.Values = val
}

// Helm values override.
type ServiceInstallRequestValues map[string]jx.Raw

func (s *ServiceInstallRequestValues) init() ServiceInstallRequestValues {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// WatchReleaseForbidden is response for WatchRelease operation.
type WatchReleaseForbidden struct{}

func (*WatchReleaseForbidden) watchReleaseRes() {}

type WatchReleaseOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s WatchReleaseOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

// WatchReleaseOKHeaders wraps WatchReleaseOK with response headers.
type WatchReleaseOKHeaders struct {
	CacheControl OptString
	Connection   OptString
	Response     WatchReleaseOK
}

// GetCacheControl returns the value of CacheControl.
func (s *WatchReleaseOKHeaders) GetCacheControl() OptString {
	return s.CacheControl
}

// GetConnection returns the value of Connection.
func (s *WatchReleaseOKHeaders) GetConnection() OptString {
	return s.Connection
}

// GetResponse returns the value of Response.
func (s *WatchReleaseOKHeaders) GetResponse() WatchReleaseOK {
	return s.Response
}

// SetCacheControl sets the value of CacheControl.
func (s *WatchReleaseOKHeaders) SetCacheControl(val OptString) {
	s.CacheControl = val
}

// SetConnection sets the value of Connection.
func (s *WatchReleaseOKHeaders) SetConnection(val OptString) {
	s.Connection = val
}

// SetResponse sets the value of Response.
func (s *WatchReleaseOKHeaders) SetResponse(val WatchReleaseOK) {
	s.Response = val
}

func (*WatchReleaseOKHeaders) watchReleaseRes() {}

// WatchReleaseUnauthorized is response for WatchRelease operation.
type WatchReleaseUnauthorized struct{}

func (*WatchReleaseUnauthorized) watchReleaseRes() {}

// WatchResourcesForbidden is response for WatchResources operation.
type WatchResourcesForbidden struct{}

func (*WatchResourcesForbidden) watchResourcesRes() {}

type WatchResourcesOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s WatchResourcesOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

// WatchResourcesOKHeaders wraps WatchResourcesOK with response headers.
type WatchResourcesOKHeaders struct {
	CacheControl OptString
	Connection   OptString
	Response     WatchResourcesOK
}

// GetCacheControl returns the value of CacheControl.
func (s *WatchResourcesOKHeaders) GetCacheControl() OptString {
	return s.CacheControl
}

// GetConnection returns the value of Connection.
func (s *WatchResourcesOKHeaders) GetConnection() OptString {
	return s.Connection
}

// GetResponse returns the value of Response.
func (s *WatchResourcesOKHeaders) GetResponse() WatchResourcesOK {
	return s.Response
}

// SetCacheControl sets the value of CacheControl.
func (s *WatchResourcesOKHeaders) SetCacheControl(val OptString) {
	s.CacheControl = val
}

// SetConnection sets the value of Connection.
func (s *WatchResourcesOKHeaders) SetConnection(val OptString) {
	s.Connection = val
}

// SetResponse sets the value of Response.
func (s *WatchResourcesOKHeaders) SetResponse(val WatchResourcesOK) {
	s.Response = val
}

func (*WatchResourcesOKHeaders) watchResourcesRes() {}

// WatchResourcesUnauthorized is response for WatchResources operation.
type WatchResourcesUnauthorized struct{}

func (*WatchResourcesUnauthorized) watchResourcesRes() {}
