// Code generated by ogen, DO NOT EDIT.

package api

import (
	"time"
)

// Group entry in services listing (placeholder).
// Ref: #/components/schemas/Group
type Group struct{}

// Health check result (placeholder).
// Ref: #/components/schemas/HealthCheckResult
type HealthCheckResult struct{}

// Monitoring info (placeholder).
// Ref: #/components/schemas/Monitoring
type Monitoring struct{}

type Oidc struct {
	Token  string
	Scopes []string
}

// GetToken returns the value of Token.
func (s *Oidc) GetToken() string {
	return s.Token
}

// GetScopes returns the value of Scopes.
func (s *Oidc) GetScopes() []string {
	return s.Scopes
}

// SetToken sets the value of Token.
func (s *Oidc) SetToken(val string) {
	s.Token = val
}

// SetScopes sets the value of Scopes.
func (s *Oidc) SetScopes(val []string) {
	s.Scopes = val
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptDateTime returns new OptDateTime with value set to v.
func NewOptDateTime(v time.Time) OptDateTime {
	return OptDateTime{
		Value: v,
		Set:   true,
	}
}

// OptDateTime is optional time.Time.
type OptDateTime struct {
	Value time.Time
	Set   bool
}

// IsSet returns true if OptDateTime was set.
func (o OptDateTime) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptDateTime) Reset() {
	var v time.Time
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptDateTime) SetTo(v time.Time) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptDateTime) Get() (v time.Time, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptDateTime) Or(d time.Time) time.Time {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptFloat64 returns new OptFloat64 with value set to v.
func NewOptFloat64(v float64) OptFloat64 {
	return OptFloat64{
		Value: v,
		Set:   true,
	}
}

// OptFloat64 is optional float64.
type OptFloat64 struct {
	Value float64
	Set   bool
}

// IsSet returns true if OptFloat64 was set.
func (o OptFloat64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptFloat64) Reset() {
	var v float64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptFloat64) SetTo(v float64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptFloat64) Get() (v float64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptFloat64) Or(d float64) float64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt32 returns new OptInt32 with value set to v.
func NewOptInt32(v int32) OptInt32 {
	return OptInt32{
		Value: v,
		Set:   true,
	}
}

// OptInt32 is optional int32.
type OptInt32 struct {
	Value int32
	Set   bool
}

// IsSet returns true if OptInt32 was set.
func (o OptInt32) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt32) Reset() {
	var v int32
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt32) SetTo(v int32) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt32) Get() (v int32, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt32) Or(d int32) int32 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt64 returns new OptInt64 with value set to v.
func NewOptInt64(v int64) OptInt64 {
	return OptInt64{
		Value: v,
		Set:   true,
	}
}

// OptInt64 is optional int64.
type OptInt64 struct {
	Value int64
	Set   bool
}

// IsSet returns true if OptInt64 was set.
func (o OptInt64) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt64) Reset() {
	var v int64
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt64) SetTo(v int64) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt64) Get() (v int64, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt64) Or(d int64) int64 {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptServiceEnv returns new OptServiceEnv with value set to v.
func NewOptServiceEnv(v ServiceEnv) OptServiceEnv {
	return OptServiceEnv{
		Value: v,
		Set:   true,
	}
}

// OptServiceEnv is optional ServiceEnv.
type OptServiceEnv struct {
	Value ServiceEnv
	Set   bool
}

// IsSet returns true if OptServiceEnv was set.
func (o OptServiceEnv) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptServiceEnv) Reset() {
	var v ServiceEnv
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptServiceEnv) SetTo(v ServiceEnv) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptServiceEnv) Get() (v ServiceEnv, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptServiceEnv) Or(d ServiceEnv) ServiceEnv {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptServiceLabels returns new OptServiceLabels with value set to v.
func NewOptServiceLabels(v ServiceLabels) OptServiceLabels {
	return OptServiceLabels{
		Value: v,
		Set:   true,
	}
}

// OptServiceLabels is optional ServiceLabels.
type OptServiceLabels struct {
	Value ServiceLabels
	Set   bool
}

// IsSet returns true if OptServiceLabels was set.
func (o OptServiceLabels) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptServiceLabels) Reset() {
	var v ServiceLabels
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptServiceLabels) SetTo(v ServiceLabels) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptServiceLabels) Get() (v ServiceLabels, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptServiceLabels) Or(d ServiceLabels) ServiceLabels {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/Service
type Service struct {
	// This is the name of the chart helm. This should be removed in v1.0.
	ID OptString `json:"id"`
	// This is the name of the chart helm.
	Name OptString `json:"name"`
	// This is fixed to 1. This should be removed in v1.0.
	Instances OptInt32 `json:"instances"`
	// This is fixed to 0. This should be removed in v1.0.
	Cpus OptFloat64 `json:"cpus"`
	// This is fixed to 0. This should be removed in v1.0.
	Mem OptFloat64 `json:"mem"`
	// State of the release (can be: unknown, deployed, uninstalled, superseded, failed, uninstalling,
	// pending-install, pending-upgrade or pending-rollback).
	Status OptString `json:"status"`
	// Urls are coming from ingress object.
	Urls []string `json:"urls"`
	// This should be removed in v1.0.
	InternalUrls []string `json:"internalUrls"`
	// Contains helm get values. This should be re-ingeneer in v1.0.
	Env OptServiceEnv `json:"env"`
	// Task represents pods running. This should be re-ingeneer in v1.0.
	Tasks []Task `json:"tasks"`
	// This should be removed in v1.0.
	Subtitle OptString `json:"subtitle"`
	// This should be removed in v1.0.
	Monitoring *Monitoring `json:"monitoring"`
	// Contains helm get notes.
	PostInstallInstructions OptString `json:"postInstallInstructions"`
	// Namespace of the helm release.
	Namespace OptString `json:"namespace"`
	// Version of the helm release.
	Revision OptString `json:"revision"`
	// Last updated time.
	Updated OptString `json:"updated"`
	// Version of the app. Often non relevant.
	AppVersion OptString `json:"appVersion"`
	// Chart name and version.
	Chart OptString `json:"chart"`
	// This should be removed in v1.0.
	StartedAt OptInt64 `json:"startedAt"`
	// Is this service suspendable ?.
	Suspendable OptBool `json:"suspendable"`
	// Is this service suspended ?.
	Suspended OptBool `json:"suspended"`
	// CatalogId.
	CatalogId OptString `json:"catalogId"`
	// UserID who starts the service.
	Owner OptString `json:"owner"`
	// Friendly name of the service.
	FriendlyName OptString `json:"friendlyName"`
	// Is this service shared ?.
	Share       OptBool             `json:"share"`
	Labels      OptServiceLabels    `json:"labels"`
	Controllers []HealthCheckResult `json:"controllers"`
}

// GetID returns the value of ID.
func (s *Service) GetID() OptString {
	return s.ID
}

// GetName returns the value of Name.
func (s *Service) GetName() OptString {
	return s.Name
}

// GetInstances returns the value of Instances.
func (s *Service) GetInstances() OptInt32 {
	return s.Instances
}

// GetCpus returns the value of Cpus.
func (s *Service) GetCpus() OptFloat64 {
	return s.Cpus
}

// GetMem returns the value of Mem.
func (s *Service) GetMem() OptFloat64 {
	return s.Mem
}

// GetStatus returns the value of Status.
func (s *Service) GetStatus() OptString {
	return s.Status
}

// GetUrls returns the value of Urls.
func (s *Service) GetUrls() []string {
	return s.Urls
}

// GetInternalUrls returns the value of InternalUrls.
func (s *Service) GetInternalUrls() []string {
	return s.InternalUrls
}

// GetEnv returns the value of Env.
func (s *Service) GetEnv() OptServiceEnv {
	return s.Env
}

// GetTasks returns the value of Tasks.
func (s *Service) GetTasks() []Task {
	return s.Tasks
}

// GetSubtitle returns the value of Subtitle.
func (s *Service) GetSubtitle() OptString {
	return s.Subtitle
}

// GetMonitoring returns the value of Monitoring.
func (s *Service) GetMonitoring() *Monitoring {
	return s.Monitoring
}

// GetPostInstallInstructions returns the value of PostInstallInstructions.
func (s *Service) GetPostInstallInstructions() OptString {
	return s.PostInstallInstructions
}

// GetNamespace returns the value of Namespace.
func (s *Service) GetNamespace() OptString {
	return s.Namespace
}

// GetRevision returns the value of Revision.
func (s *Service) GetRevision() OptString {
	return s.Revision
}

// GetUpdated returns the value of Updated.
func (s *Service) GetUpdated() OptString {
	return s.Updated
}

// GetAppVersion returns the value of AppVersion.
func (s *Service) GetAppVersion() OptString {
	return s.AppVersion
}

// GetChart returns the value of Chart.
func (s *Service) GetChart() OptString {
	return s.Chart
}

// GetStartedAt returns the value of StartedAt.
func (s *Service) GetStartedAt() OptInt64 {
	return s.StartedAt
}

// GetSuspendable returns the value of Suspendable.
func (s *Service) GetSuspendable() OptBool {
	return s.Suspendable
}

// GetSuspended returns the value of Suspended.
func (s *Service) GetSuspended() OptBool {
	return s.Suspended
}

// GetCatalogId returns the value of CatalogId.
func (s *Service) GetCatalogId() OptString {
	return s.CatalogId
}

// GetOwner returns the value of Owner.
func (s *Service) GetOwner() OptString {
	return s.Owner
}

// GetFriendlyName returns the value of FriendlyName.
func (s *Service) GetFriendlyName() OptString {
	return s.FriendlyName
}

// GetShare returns the value of Share.
func (s *Service) GetShare() OptBool {
	return s.Share
}

// GetLabels returns the value of Labels.
func (s *Service) GetLabels() OptServiceLabels {
	return s.Labels
}

// GetControllers returns the value of Controllers.
func (s *Service) GetControllers() []HealthCheckResult {
	return s.Controllers
}

// SetID sets the value of ID.
func (s *Service) SetID(val OptString) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *Service) SetName(val OptString) {
	s.Name = val
}

// SetInstances sets the value of Instances.
func (s *Service) SetInstances(val OptInt32) {
	s.Instances = val
}

// SetCpus sets the value of Cpus.
func (s *Service) SetCpus(val OptFloat64) {
	s.Cpus = val
}

// SetMem sets the value of Mem.
func (s *Service) SetMem(val OptFloat64) {
	s.Mem = val
}

// SetStatus sets the value of Status.
func (s *Service) SetStatus(val OptString) {
	s.Status = val
}

// SetUrls sets the value of Urls.
func (s *Service) SetUrls(val []string) {
	s.Urls = val
}

// SetInternalUrls sets the value of InternalUrls.
func (s *Service) SetInternalUrls(val []string) {
	s.InternalUrls = val
}

// SetEnv sets the value of Env.
func (s *Service) SetEnv(val OptServiceEnv) {
	s.Env = val
}

// SetTasks sets the value of Tasks.
func (s *Service) SetTasks(val []Task) {
	s.Tasks = val
}

// SetSubtitle sets the value of Subtitle.
func (s *Service) SetSubtitle(val OptString) {
	s.Subtitle = val
}

// SetMonitoring sets the value of Monitoring.
func (s *Service) SetMonitoring(val *Monitoring) {
	s.Monitoring = val
}

// SetPostInstallInstructions sets the value of PostInstallInstructions.
func (s *Service) SetPostInstallInstructions(val OptString) {
	s.PostInstallInstructions = val
}

// SetNamespace sets the value of Namespace.
func (s *Service) SetNamespace(val OptString) {
	s.Namespace = val
}

// SetRevision sets the value of Revision.
func (s *Service) SetRevision(val OptString) {
	s.Revision = val
}

// SetUpdated sets the value of Updated.
func (s *Service) SetUpdated(val OptString) {
	s.Updated = val
}

// SetAppVersion sets the value of AppVersion.
func (s *Service) SetAppVersion(val OptString) {
	s.AppVersion = val
}

// SetChart sets the value of Chart.
func (s *Service) SetChart(val OptString) {
	s.Chart = val
}

// SetStartedAt sets the value of StartedAt.
func (s *Service) SetStartedAt(val OptInt64) {
	s.StartedAt = val
}

// SetSuspendable sets the value of Suspendable.
func (s *Service) SetSuspendable(val OptBool) {
	s.Suspendable = val
}

// SetSuspended sets the value of Suspended.
func (s *Service) SetSuspended(val OptBool) {
	s.Suspended = val
}

// SetCatalogId sets the value of CatalogId.
func (s *Service) SetCatalogId(val OptString) {
	s.CatalogId = val
}

// SetOwner sets the value of Owner.
func (s *Service) SetOwner(val OptString) {
	s.Owner = val
}

// SetFriendlyName sets the value of FriendlyName.
func (s *Service) SetFriendlyName(val OptString) {
	s.FriendlyName = val
}

// SetShare sets the value of Share.
func (s *Service) SetShare(val OptBool) {
	s.Share = val
}

// SetLabels sets the value of Labels.
func (s *Service) SetLabels(val OptServiceLabels) {
	s.Labels = val
}

// SetControllers sets the value of Controllers.
func (s *Service) SetControllers(val []HealthCheckResult) {
	s.Controllers = val
}

// Contains helm get values. This should be re-ingeneer in v1.0.
type ServiceEnv map[string]string

func (s *ServiceEnv) init() ServiceEnv {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

type ServiceLabels map[string]string

func (s *ServiceLabels) init() ServiceLabels {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

// Ref: #/components/schemas/ServicesListing
type ServicesListing struct {
	Apps   []Service `json:"apps"`
	Groups []Group   `json:"groups"`
}

// GetApps returns the value of Apps.
func (s *ServicesListing) GetApps() []Service {
	return s.Apps
}

// GetGroups returns the value of Groups.
func (s *ServicesListing) GetGroups() []Group {
	return s.Groups
}

// SetApps sets the value of Apps.
func (s *ServicesListing) SetApps(val []Service) {
	s.Apps = val
}

// SetGroups sets the value of Groups.
func (s *ServicesListing) SetGroups(val []Group) {
	s.Groups = val
}

// Pod/task of a service.
// Ref: #/components/schemas/Task
type Task struct {
	// Unique task ID (e.g., pod name).
	ID         OptString   `json:"id"`
	Status     OptString   `json:"status"`
	StartedAt  OptDateTime `json:"startedAt"`
	FinishedAt OptDateTime `json:"finishedAt"`
	// Logs or log URL.
	Logs OptString `json:"logs"`
}

// GetID returns the value of ID.
func (s *Task) GetID() OptString {
	return s.ID
}

// GetStatus returns the value of Status.
func (s *Task) GetStatus() OptString {
	return s.Status
}

// GetStartedAt returns the value of StartedAt.
func (s *Task) GetStartedAt() OptDateTime {
	return s.StartedAt
}

// GetFinishedAt returns the value of FinishedAt.
func (s *Task) GetFinishedAt() OptDateTime {
	return s.FinishedAt
}

// GetLogs returns the value of Logs.
func (s *Task) GetLogs() OptString {
	return s.Logs
}

// SetID sets the value of ID.
func (s *Task) SetID(val OptString) {
	s.ID = val
}

// SetStatus sets the value of Status.
func (s *Task) SetStatus(val OptString) {
	s.Status = val
}

// SetStartedAt sets the value of StartedAt.
func (s *Task) SetStartedAt(val OptDateTime) {
	s.StartedAt = val
}

// SetFinishedAt sets the value of FinishedAt.
func (s *Task) SetFinishedAt(val OptDateTime) {
	s.FinishedAt = val
}

// SetLogs sets the value of Logs.
func (s *Task) SetLogs(val OptString) {
	s.Logs = val
}
