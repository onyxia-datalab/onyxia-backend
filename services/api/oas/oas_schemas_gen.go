// Code generated by ogen, DO NOT EDIT.

package api

import (
	"io"
	"net/url"

	"github.com/go-faster/errors"
	"github.com/go-faster/jx"
)

// Ref: #/components/schemas/Catalog
type Catalog struct {
	// Catalog id.
	ID string `json:"id"`
	// The name of the catalog.
	Name LocalizedString `json:"name"`
	// The description of the catalog.
	Description OptLocalizedString `json:"description"`
	// Where to find the catalog.
	Location OptString `json:"location"`
	// Is the catalog a test or a production catalog.
	Status OptCatalogStatus `json:"status"`
	// Names of important packages of the catalog to highlight in the UI.
	HighlightedCharts []string `json:"highlightedCharts"`
	// Describes if the catalog is visible in user or project context.
	Visible OptCatalogVisible `json:"visible"`
}

// GetID returns the value of ID.
func (s *Catalog) GetID() string {
	return s.ID
}

// GetName returns the value of Name.
func (s *Catalog) GetName() LocalizedString {
	return s.Name
}

// GetDescription returns the value of Description.
func (s *Catalog) GetDescription() OptLocalizedString {
	return s.Description
}

// GetLocation returns the value of Location.
func (s *Catalog) GetLocation() OptString {
	return s.Location
}

// GetStatus returns the value of Status.
func (s *Catalog) GetStatus() OptCatalogStatus {
	return s.Status
}

// GetHighlightedCharts returns the value of HighlightedCharts.
func (s *Catalog) GetHighlightedCharts() []string {
	return s.HighlightedCharts
}

// GetVisible returns the value of Visible.
func (s *Catalog) GetVisible() OptCatalogVisible {
	return s.Visible
}

// SetID sets the value of ID.
func (s *Catalog) SetID(val string) {
	s.ID = val
}

// SetName sets the value of Name.
func (s *Catalog) SetName(val LocalizedString) {
	s.Name = val
}

// SetDescription sets the value of Description.
func (s *Catalog) SetDescription(val OptLocalizedString) {
	s.Description = val
}

// SetLocation sets the value of Location.
func (s *Catalog) SetLocation(val OptString) {
	s.Location = val
}

// SetStatus sets the value of Status.
func (s *Catalog) SetStatus(val OptCatalogStatus) {
	s.Status = val
}

// SetHighlightedCharts sets the value of HighlightedCharts.
func (s *Catalog) SetHighlightedCharts(val []string) {
	s.HighlightedCharts = val
}

// SetVisible sets the value of Visible.
func (s *Catalog) SetVisible(val OptCatalogVisible) {
	s.Visible = val
}

// Is the catalog a test or a production catalog.
type CatalogStatus string

const (
	CatalogStatusPROD CatalogStatus = "PROD"
	CatalogStatusTEST CatalogStatus = "TEST"
)

// AllValues returns all CatalogStatus values.
func (CatalogStatus) AllValues() []CatalogStatus {
	return []CatalogStatus{
		CatalogStatusPROD,
		CatalogStatusTEST,
	}
}

// MarshalText implements encoding.TextMarshaler.
func (s CatalogStatus) MarshalText() ([]byte, error) {
	switch s {
	case CatalogStatusPROD:
		return []byte(s), nil
	case CatalogStatusTEST:
		return []byte(s), nil
	default:
		return nil, errors.Errorf("invalid value: %q", s)
	}
}

// UnmarshalText implements encoding.TextUnmarshaler.
func (s *CatalogStatus) UnmarshalText(data []byte) error {
	switch CatalogStatus(data) {
	case CatalogStatusPROD:
		*s = CatalogStatusPROD
		return nil
	case CatalogStatusTEST:
		*s = CatalogStatusTEST
		return nil
	default:
		return errors.Errorf("invalid value: %q", data)
	}
}

// Describes if the catalog is visible in user or project context.
type CatalogVisible struct {
	// Should this catalog be visible in user context ?.
	User bool `json:"user"`
	// Should this catalog be visible in project context ?.
	Project bool `json:"project"`
}

// GetUser returns the value of User.
func (s *CatalogVisible) GetUser() bool {
	return s.User
}

// GetProject returns the value of Project.
func (s *CatalogVisible) GetProject() bool {
	return s.Project
}

// SetUser sets the value of User.
func (s *CatalogVisible) SetUser(val bool) {
	s.User = val
}

// SetProject sets the value of Project.
func (s *CatalogVisible) SetProject(val bool) {
	s.Project = val
}

type GetMyCatalogsOKApplicationJSON []Catalog

func (*GetMyCatalogsOKApplicationJSON) getMyCatalogsRes() {}

// Ref: #/components/schemas/InstallAccepted
type InstallAccepted struct {
	EventsUrl InstallAcceptedEventsUrl `json:"eventsUrl"`
}

// GetEventsUrl returns the value of EventsUrl.
func (s *InstallAccepted) GetEventsUrl() InstallAcceptedEventsUrl {
	return s.EventsUrl
}

// SetEventsUrl sets the value of EventsUrl.
func (s *InstallAccepted) SetEventsUrl(val InstallAcceptedEventsUrl) {
	s.EventsUrl = val
}

type InstallAcceptedEventsUrl struct {
	Release   string `json:"release"`
	Resources string `json:"resources"`
}

// GetRelease returns the value of Release.
func (s *InstallAcceptedEventsUrl) GetRelease() string {
	return s.Release
}

// GetResources returns the value of Resources.
func (s *InstallAcceptedEventsUrl) GetResources() string {
	return s.Resources
}

// SetRelease sets the value of Release.
func (s *InstallAcceptedEventsUrl) SetRelease(val string) {
	s.Release = val
}

// SetResources sets the value of Resources.
func (s *InstallAcceptedEventsUrl) SetResources(val string) {
	s.Resources = val
}

// InstallAcceptedHeaders wraps InstallAccepted with response headers.
type InstallAcceptedHeaders struct {
	Location OptString
	Response InstallAccepted
}

// GetLocation returns the value of Location.
func (s *InstallAcceptedHeaders) GetLocation() OptString {
	return s.Location
}

// GetResponse returns the value of Response.
func (s *InstallAcceptedHeaders) GetResponse() InstallAccepted {
	return s.Response
}

// SetLocation sets the value of Location.
func (s *InstallAcceptedHeaders) SetLocation(val OptString) {
	s.Location = val
}

// SetResponse sets the value of Response.
func (s *InstallAcceptedHeaders) SetResponse(val InstallAccepted) {
	s.Response = val
}

func (*InstallAcceptedHeaders) installServiceRes() {}

type InstallServiceBadRequest Problem

func (*InstallServiceBadRequest) installServiceRes() {}

type InstallServiceConflict Problem

func (*InstallServiceConflict) installServiceRes() {}

type InstallServiceForbidden Problem

func (*InstallServiceForbidden) installServiceRes() {}

type InstallServiceInternalServerError Problem

func (*InstallServiceInternalServerError) installServiceRes() {}

// InstallServiceUnauthorized is response for InstallService operation.
type InstallServiceUnauthorized struct{}

func (*InstallServiceUnauthorized) installServiceRes() {}

// A string or a map of localized strings by language code.
// Ref: #/components/schemas/LocalizedString
// LocalizedString represents sum type.
type LocalizedString struct {
	Type             LocalizedStringType // switch on this field
	String           string
	LocalizedString1 LocalizedString1
}

// LocalizedStringType is oneOf type of LocalizedString.
type LocalizedStringType string

// Possible values for LocalizedStringType.
const (
	StringLocalizedString           LocalizedStringType = "string"
	LocalizedString1LocalizedString LocalizedStringType = "LocalizedString1"
)

// IsString reports whether LocalizedString is string.
func (s LocalizedString) IsString() bool { return s.Type == StringLocalizedString }

// IsLocalizedString1 reports whether LocalizedString is LocalizedString1.
func (s LocalizedString) IsLocalizedString1() bool { return s.Type == LocalizedString1LocalizedString }

// SetString sets LocalizedString to string.
func (s *LocalizedString) SetString(v string) {
	s.Type = StringLocalizedString
	s.String = v
}

// GetString returns string and true boolean if LocalizedString is string.
func (s LocalizedString) GetString() (v string, ok bool) {
	if !s.IsString() {
		return v, false
	}
	return s.String, true
}

// NewStringLocalizedString returns new LocalizedString from string.
func NewStringLocalizedString(v string) LocalizedString {
	var s LocalizedString
	s.SetString(v)
	return s
}

// SetLocalizedString1 sets LocalizedString to LocalizedString1.
func (s *LocalizedString) SetLocalizedString1(v LocalizedString1) {
	s.Type = LocalizedString1LocalizedString
	s.LocalizedString1 = v
}

// GetLocalizedString1 returns LocalizedString1 and true boolean if LocalizedString is LocalizedString1.
func (s LocalizedString) GetLocalizedString1() (v LocalizedString1, ok bool) {
	if !s.IsLocalizedString1() {
		return v, false
	}
	return s.LocalizedString1, true
}

// NewLocalizedString1LocalizedString returns new LocalizedString from LocalizedString1.
func NewLocalizedString1LocalizedString(v LocalizedString1) LocalizedString {
	var s LocalizedString
	s.SetLocalizedString1(v)
	return s
}

type LocalizedString1 struct {
	En              OptString `json:"en"`
	Fr              OptString `json:"fr"`
	ZhMinusCN       OptString `json:"zh-CN"`
	No              OptString `json:"no"`
	Fi              OptString `json:"fi"`
	Nl              OptString `json:"nl"`
	It              OptString `json:"it"`
	Es              OptString `json:"es"`
	De              OptString `json:"de"`
	AdditionalProps LocalizedString1Additional
}

// GetEn returns the value of En.
func (s *LocalizedString1) GetEn() OptString {
	return s.En
}

// GetFr returns the value of Fr.
func (s *LocalizedString1) GetFr() OptString {
	return s.Fr
}

// GetZhMinusCN returns the value of ZhMinusCN.
func (s *LocalizedString1) GetZhMinusCN() OptString {
	return s.ZhMinusCN
}

// GetNo returns the value of No.
func (s *LocalizedString1) GetNo() OptString {
	return s.No
}

// GetFi returns the value of Fi.
func (s *LocalizedString1) GetFi() OptString {
	return s.Fi
}

// GetNl returns the value of Nl.
func (s *LocalizedString1) GetNl() OptString {
	return s.Nl
}

// GetIt returns the value of It.
func (s *LocalizedString1) GetIt() OptString {
	return s.It
}

// GetEs returns the value of Es.
func (s *LocalizedString1) GetEs() OptString {
	return s.Es
}

// GetDe returns the value of De.
func (s *LocalizedString1) GetDe() OptString {
	return s.De
}

// GetAdditionalProps returns the value of AdditionalProps.
func (s *LocalizedString1) GetAdditionalProps() LocalizedString1Additional {
	return s.AdditionalProps
}

// SetEn sets the value of En.
func (s *LocalizedString1) SetEn(val OptString) {
	s.En = val
}

// SetFr sets the value of Fr.
func (s *LocalizedString1) SetFr(val OptString) {
	s.Fr = val
}

// SetZhMinusCN sets the value of ZhMinusCN.
func (s *LocalizedString1) SetZhMinusCN(val OptString) {
	s.ZhMinusCN = val
}

// SetNo sets the value of No.
func (s *LocalizedString1) SetNo(val OptString) {
	s.No = val
}

// SetFi sets the value of Fi.
func (s *LocalizedString1) SetFi(val OptString) {
	s.Fi = val
}

// SetNl sets the value of Nl.
func (s *LocalizedString1) SetNl(val OptString) {
	s.Nl = val
}

// SetIt sets the value of It.
func (s *LocalizedString1) SetIt(val OptString) {
	s.It = val
}

// SetEs sets the value of Es.
func (s *LocalizedString1) SetEs(val OptString) {
	s.Es = val
}

// SetDe sets the value of De.
func (s *LocalizedString1) SetDe(val OptString) {
	s.De = val
}

// SetAdditionalProps sets the value of AdditionalProps.
func (s *LocalizedString1) SetAdditionalProps(val LocalizedString1Additional) {
	s.AdditionalProps = val
}

type LocalizedString1Additional map[string]string

func (s *LocalizedString1Additional) init() LocalizedString1Additional {
	m := *s
	if m == nil {
		m = map[string]string{}
		*s = m
	}
	return m
}

type Oidc struct {
	Token  string
	Scopes []string
}

// GetToken returns the value of Token.
func (s *Oidc) GetToken() string {
	return s.Token
}

// GetScopes returns the value of Scopes.
func (s *Oidc) GetScopes() []string {
	return s.Scopes
}

// SetToken sets the value of Token.
func (s *Oidc) SetToken(val string) {
	s.Token = val
}

// SetScopes sets the value of Scopes.
func (s *Oidc) SetScopes(val []string) {
	s.Scopes = val
}

// NewOptBool returns new OptBool with value set to v.
func NewOptBool(v bool) OptBool {
	return OptBool{
		Value: v,
		Set:   true,
	}
}

// OptBool is optional bool.
type OptBool struct {
	Value bool
	Set   bool
}

// IsSet returns true if OptBool was set.
func (o OptBool) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptBool) Reset() {
	var v bool
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptBool) SetTo(v bool) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptBool) Get() (v bool, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptBool) Or(d bool) bool {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCatalogStatus returns new OptCatalogStatus with value set to v.
func NewOptCatalogStatus(v CatalogStatus) OptCatalogStatus {
	return OptCatalogStatus{
		Value: v,
		Set:   true,
	}
}

// OptCatalogStatus is optional CatalogStatus.
type OptCatalogStatus struct {
	Value CatalogStatus
	Set   bool
}

// IsSet returns true if OptCatalogStatus was set.
func (o OptCatalogStatus) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCatalogStatus) Reset() {
	var v CatalogStatus
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCatalogStatus) SetTo(v CatalogStatus) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCatalogStatus) Get() (v CatalogStatus, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCatalogStatus) Or(d CatalogStatus) CatalogStatus {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptCatalogVisible returns new OptCatalogVisible with value set to v.
func NewOptCatalogVisible(v CatalogVisible) OptCatalogVisible {
	return OptCatalogVisible{
		Value: v,
		Set:   true,
	}
}

// OptCatalogVisible is optional CatalogVisible.
type OptCatalogVisible struct {
	Value CatalogVisible
	Set   bool
}

// IsSet returns true if OptCatalogVisible was set.
func (o OptCatalogVisible) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptCatalogVisible) Reset() {
	var v CatalogVisible
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptCatalogVisible) SetTo(v CatalogVisible) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptCatalogVisible) Get() (v CatalogVisible, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptCatalogVisible) Or(d CatalogVisible) CatalogVisible {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptInt returns new OptInt with value set to v.
func NewOptInt(v int) OptInt {
	return OptInt{
		Value: v,
		Set:   true,
	}
}

// OptInt is optional int.
type OptInt struct {
	Value int
	Set   bool
}

// IsSet returns true if OptInt was set.
func (o OptInt) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptInt) Reset() {
	var v int
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptInt) SetTo(v int) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptInt) Get() (v int, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptInt) Or(d int) int {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptLocalizedString returns new OptLocalizedString with value set to v.
func NewOptLocalizedString(v LocalizedString) OptLocalizedString {
	return OptLocalizedString{
		Value: v,
		Set:   true,
	}
}

// OptLocalizedString is optional LocalizedString.
type OptLocalizedString struct {
	Value LocalizedString
	Set   bool
}

// IsSet returns true if OptLocalizedString was set.
func (o OptLocalizedString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptLocalizedString) Reset() {
	var v LocalizedString
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptLocalizedString) SetTo(v LocalizedString) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptLocalizedString) Get() (v LocalizedString, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptLocalizedString) Or(d LocalizedString) LocalizedString {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptString returns new OptString with value set to v.
func NewOptString(v string) OptString {
	return OptString{
		Value: v,
		Set:   true,
	}
}

// OptString is optional string.
type OptString struct {
	Value string
	Set   bool
}

// IsSet returns true if OptString was set.
func (o OptString) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptString) Reset() {
	var v string
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptString) SetTo(v string) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptString) Get() (v string, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptString) Or(d string) string {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// NewOptURI returns new OptURI with value set to v.
func NewOptURI(v url.URL) OptURI {
	return OptURI{
		Value: v,
		Set:   true,
	}
}

// OptURI is optional url.URL.
type OptURI struct {
	Value url.URL
	Set   bool
}

// IsSet returns true if OptURI was set.
func (o OptURI) IsSet() bool { return o.Set }

// Reset unsets value.
func (o *OptURI) Reset() {
	var v url.URL
	o.Value = v
	o.Set = false
}

// SetTo sets value to v.
func (o *OptURI) SetTo(v url.URL) {
	o.Set = true
	o.Value = v
}

// Get returns value and boolean that denotes whether value was set.
func (o OptURI) Get() (v url.URL, ok bool) {
	if !o.Set {
		return v, false
	}
	return o.Value, true
}

// Or returns value if set, or given parameter if does not.
func (o OptURI) Or(d url.URL) url.URL {
	if v, ok := o.Get(); ok {
		return v
	}
	return d
}

// Ref: #/components/schemas/Problem
type Problem struct {
	Type            OptURI    `json:"type"`
	Title           OptString `json:"title"`
	Status          OptInt    `json:"status"`
	Detail          OptString `json:"detail"`
	Instance        OptString `json:"instance"`
	AdditionalProps ProblemAdditional
}

// GetType returns the value of Type.
func (s *Problem) GetType() OptURI {
	return s.Type
}

// GetTitle returns the value of Title.
func (s *Problem) GetTitle() OptString {
	return s.Title
}

// GetStatus returns the value of Status.
func (s *Problem) GetStatus() OptInt {
	return s.Status
}

// GetDetail returns the value of Detail.
func (s *Problem) GetDetail() OptString {
	return s.Detail
}

// GetInstance returns the value of Instance.
func (s *Problem) GetInstance() OptString {
	return s.Instance
}

// GetAdditionalProps returns the value of AdditionalProps.
func (s *Problem) GetAdditionalProps() ProblemAdditional {
	return s.AdditionalProps
}

// SetType sets the value of Type.
func (s *Problem) SetType(val OptURI) {
	s.Type = val
}

// SetTitle sets the value of Title.
func (s *Problem) SetTitle(val OptString) {
	s.Title = val
}

// SetStatus sets the value of Status.
func (s *Problem) SetStatus(val OptInt) {
	s.Status = val
}

// SetDetail sets the value of Detail.
func (s *Problem) SetDetail(val OptString) {
	s.Detail = val
}

// SetInstance sets the value of Instance.
func (s *Problem) SetInstance(val OptString) {
	s.Instance = val
}

// SetAdditionalProps sets the value of AdditionalProps.
func (s *Problem) SetAdditionalProps(val ProblemAdditional) {
	s.AdditionalProps = val
}

func (*Problem) getMyCatalogsRes()  {}
func (*Problem) watchReleaseRes()   {}
func (*Problem) watchResourcesRes() {}

type ProblemAdditional map[string]jx.Raw

func (s *ProblemAdditional) init() ProblemAdditional {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// Ref: #/components/schemas/ServiceInstallRequest
type ServiceInstallRequest struct {
	// Catalog where the package of the service is taken from.
	CatalogId string `json:"catalogId"`
	// Package name that will be used to create the service, necessary for package recovering (verify
	// package).
	PackageName string `json:"packageName"`
	// Version of the helm package, put version into creation, if not null.
	PackageVersion OptString `json:"packageVersion"`
	// Chart version (empty for latest).
	Version OptString `json:"version"`
	// Options of package (values.yaml for helm).
	Options ServiceInstallRequestOptions `json:"options"`
	// When true, all users of the namespace will list this service.
	Share OptBool `json:"share"`
	// Friendly name for the service.
	FriendlyName OptString `json:"friendlyName"`
	// A chosen name for the service.
	Name string `json:"name"`
}

// GetCatalogId returns the value of CatalogId.
func (s *ServiceInstallRequest) GetCatalogId() string {
	return s.CatalogId
}

// GetPackageName returns the value of PackageName.
func (s *ServiceInstallRequest) GetPackageName() string {
	return s.PackageName
}

// GetPackageVersion returns the value of PackageVersion.
func (s *ServiceInstallRequest) GetPackageVersion() OptString {
	return s.PackageVersion
}

// GetVersion returns the value of Version.
func (s *ServiceInstallRequest) GetVersion() OptString {
	return s.Version
}

// GetOptions returns the value of Options.
func (s *ServiceInstallRequest) GetOptions() ServiceInstallRequestOptions {
	return s.Options
}

// GetShare returns the value of Share.
func (s *ServiceInstallRequest) GetShare() OptBool {
	return s.Share
}

// GetFriendlyName returns the value of FriendlyName.
func (s *ServiceInstallRequest) GetFriendlyName() OptString {
	return s.FriendlyName
}

// GetName returns the value of Name.
func (s *ServiceInstallRequest) GetName() string {
	return s.Name
}

// SetCatalogId sets the value of CatalogId.
func (s *ServiceInstallRequest) SetCatalogId(val string) {
	s.CatalogId = val
}

// SetPackageName sets the value of PackageName.
func (s *ServiceInstallRequest) SetPackageName(val string) {
	s.PackageName = val
}

// SetPackageVersion sets the value of PackageVersion.
func (s *ServiceInstallRequest) SetPackageVersion(val OptString) {
	s.PackageVersion = val
}

// SetVersion sets the value of Version.
func (s *ServiceInstallRequest) SetVersion(val OptString) {
	s.Version = val
}

// SetOptions sets the value of Options.
func (s *ServiceInstallRequest) SetOptions(val ServiceInstallRequestOptions) {
	s.Options = val
}

// SetShare sets the value of Share.
func (s *ServiceInstallRequest) SetShare(val OptBool) {
	s.Share = val
}

// SetFriendlyName sets the value of FriendlyName.
func (s *ServiceInstallRequest) SetFriendlyName(val OptString) {
	s.FriendlyName = val
}

// SetName sets the value of Name.
func (s *ServiceInstallRequest) SetName(val string) {
	s.Name = val
}

// Options of package (values.yaml for helm).
type ServiceInstallRequestOptions map[string]jx.Raw

func (s *ServiceInstallRequestOptions) init() ServiceInstallRequestOptions {
	m := *s
	if m == nil {
		m = map[string]jx.Raw{}
		*s = m
	}
	return m
}

// WatchReleaseForbidden is response for WatchRelease operation.
type WatchReleaseForbidden struct{}

func (*WatchReleaseForbidden) watchReleaseRes() {}

type WatchReleaseOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s WatchReleaseOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

// WatchReleaseOKHeaders wraps WatchReleaseOK with response headers.
type WatchReleaseOKHeaders struct {
	CacheControl OptString
	Connection   OptString
	Response     WatchReleaseOK
}

// GetCacheControl returns the value of CacheControl.
func (s *WatchReleaseOKHeaders) GetCacheControl() OptString {
	return s.CacheControl
}

// GetConnection returns the value of Connection.
func (s *WatchReleaseOKHeaders) GetConnection() OptString {
	return s.Connection
}

// GetResponse returns the value of Response.
func (s *WatchReleaseOKHeaders) GetResponse() WatchReleaseOK {
	return s.Response
}

// SetCacheControl sets the value of CacheControl.
func (s *WatchReleaseOKHeaders) SetCacheControl(val OptString) {
	s.CacheControl = val
}

// SetConnection sets the value of Connection.
func (s *WatchReleaseOKHeaders) SetConnection(val OptString) {
	s.Connection = val
}

// SetResponse sets the value of Response.
func (s *WatchReleaseOKHeaders) SetResponse(val WatchReleaseOK) {
	s.Response = val
}

func (*WatchReleaseOKHeaders) watchReleaseRes() {}

// WatchReleaseUnauthorized is response for WatchRelease operation.
type WatchReleaseUnauthorized struct{}

func (*WatchReleaseUnauthorized) watchReleaseRes() {}

// WatchResourcesForbidden is response for WatchResources operation.
type WatchResourcesForbidden struct{}

func (*WatchResourcesForbidden) watchResourcesRes() {}

type WatchResourcesOK struct {
	Data io.Reader
}

// Read reads data from the Data reader.
//
// Kept to satisfy the io.Reader interface.
func (s WatchResourcesOK) Read(p []byte) (n int, err error) {
	if s.Data == nil {
		return 0, io.EOF
	}
	return s.Data.Read(p)
}

// WatchResourcesOKHeaders wraps WatchResourcesOK with response headers.
type WatchResourcesOKHeaders struct {
	CacheControl OptString
	Connection   OptString
	Response     WatchResourcesOK
}

// GetCacheControl returns the value of CacheControl.
func (s *WatchResourcesOKHeaders) GetCacheControl() OptString {
	return s.CacheControl
}

// GetConnection returns the value of Connection.
func (s *WatchResourcesOKHeaders) GetConnection() OptString {
	return s.Connection
}

// GetResponse returns the value of Response.
func (s *WatchResourcesOKHeaders) GetResponse() WatchResourcesOK {
	return s.Response
}

// SetCacheControl sets the value of CacheControl.
func (s *WatchResourcesOKHeaders) SetCacheControl(val OptString) {
	s.CacheControl = val
}

// SetConnection sets the value of Connection.
func (s *WatchResourcesOKHeaders) SetConnection(val OptString) {
	s.Connection = val
}

// SetResponse sets the value of Response.
func (s *WatchResourcesOKHeaders) SetResponse(val WatchResourcesOK) {
	s.Response = val
}

func (*WatchResourcesOKHeaders) watchResourcesRes() {}

// WatchResourcesUnauthorized is response for WatchResources operation.
type WatchResourcesUnauthorized struct{}

func (*WatchResourcesUnauthorized) watchResourcesRes() {}
