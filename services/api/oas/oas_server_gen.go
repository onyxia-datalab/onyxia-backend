// Code generated by ogen, DO NOT EDIT.

package api

import (
	"context"
)

// Handler handles operations described by OpenAPI v3 specification.
type Handler interface {
	// APIServicesSchemasCatalogIdPackageNamePackageNameVersionsVersionGet implements GET /api/services/schemas/{catalogId}/packageName/{packageName}/versions/{version} operation.
	//
	// Returns the values.schema.json of a versioned package. The schema is enhanced by user permissions
	// and roles.
	//
	// GET /api/services/schemas/{catalogId}/packageName/{packageName}/versions/{version}
	APIServicesSchemasCatalogIdPackageNamePackageNameVersionsVersionGet(ctx context.Context, params APIServicesSchemasCatalogIdPackageNamePackageNameVersionsVersionGetParams) (APIServicesSchemasCatalogIdPackageNamePackageNameVersionsVersionGetRes, error)
	// GetMyCatalogs implements getMyCatalogs operation.
	//
	// Returns the list of catalogs and packages available for the user. The list of packages is filtered
	// by user permissions if the user is authenticated. Otherwise returns the public catalog.
	//
	// GET /api/services/catalogs
	GetMyCatalogs(ctx context.Context) (GetMyCatalogsRes, error)
	// GetMyPackage implements getMyPackage operation.
	//
	// Returns detailed information about a package in a catalog, including available versions.
	//
	// GET /api/services/catalogs/{catalogId}/packages/{packageName}
	GetMyPackage(ctx context.Context, params GetMyPackageParams) (GetMyPackageRes, error)
	// InstallService implements installService operation.
	//
	// Starts an install for the given releaseId. Returns 202 with URLs for SSE streams. Idempotent if
	// the release already exists (returns 202 with the same event URLs).
	//
	// PUT /api/services/{releaseId}/install
	InstallService(ctx context.Context, req *ServiceInstallRequest, params InstallServiceParams) (InstallServiceRes, error)
	// WatchRelease implements watchRelease operation.
	//
	// Server-Sent Events (text/event-stream). Emits: "status", "log" (optional), and "done".
	//
	// GET /api/services/events/{releaseId}/watch-release
	WatchRelease(ctx context.Context, params WatchReleaseParams) (WatchReleaseRes, error)
	// WatchResources implements watchResources operation.
	//
	// Server-Sent Events (text/event-stream). Filters resources by labelSelector: app.kubernetes.
	// io/instance={releaseId}. Emits: "resource" (add/update/delete), "progress" (aggregated readiness),
	// "done".
	//
	// GET /api/services/events/{releaseId}/watch-resources
	WatchResources(ctx context.Context, params WatchResourcesParams) (WatchResourcesRes, error)
}

// Server implements http server based on OpenAPI v3 specification and
// calls Handler to handle requests.
type Server struct {
	h   Handler
	sec SecurityHandler
	baseServer
}

// NewServer creates new Server.
func NewServer(h Handler, sec SecurityHandler, opts ...ServerOption) (*Server, error) {
	s, err := newServerConfig(opts...).baseServer()
	if err != nil {
		return nil, err
	}
	return &Server{
		h:          h,
		sec:        sec,
		baseServer: s,
	}, nil
}
