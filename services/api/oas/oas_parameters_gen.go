// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"

	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
)

// GetAppParams is parameters of getApp operation.
type GetAppParams struct {
	// Project associated with the namespace, defaults to user project.
	ONYXIAPROJECT OptString
	// Unique ID of the installed service in that namespace.
	ServiceId string
}

func unpackGetAppParams(packed middleware.Parameters) (params GetAppParams) {
	{
		key := middleware.ParameterKey{
			Name: "ONYXIA-PROJECT",
			In:   "header",
		}
		if v, ok := packed[key]; ok {
			params.ONYXIAPROJECT = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "serviceId",
			In:   "query",
		}
		params.ServiceId = packed[key].(string)
	}
	return params
}

func decodeGetAppParams(args [0]string, argsEscaped bool, r *http.Request) (params GetAppParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	h := uri.NewHeaderDecoder(r.Header)
	// Decode header: ONYXIA-PROJECT.
	if err := func() error {
		cfg := uri.HeaderParameterDecodingConfig{
			Name:    "ONYXIA-PROJECT",
			Explode: false,
		}
		if err := h.HasParam(cfg); err == nil {
			if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotONYXIAPROJECTVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotONYXIAPROJECTVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ONYXIAPROJECT.SetTo(paramsDotONYXIAPROJECTVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "ONYXIA-PROJECT",
			In:   "header",
			Err:  err,
		}
	}
	// Decode query: serviceId.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "serviceId",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ServiceId = c
				return nil
			}); err != nil {
				return err
			}
		} else {
			return err
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "serviceId",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}

// GetMyServicesParams is parameters of getMyServices operation.
type GetMyServicesParams struct {
	// Project associated with the namespace, defaults to user project.
	ONYXIAPROJECT OptString
	// Deprectated.
	//
	// Deprecated: schema marks this parameter as deprecated.
	GroupId OptString
}

func unpackGetMyServicesParams(packed middleware.Parameters) (params GetMyServicesParams) {
	{
		key := middleware.ParameterKey{
			Name: "ONYXIA-PROJECT",
			In:   "header",
		}
		if v, ok := packed[key]; ok {
			params.ONYXIAPROJECT = v.(OptString)
		}
	}
	{
		key := middleware.ParameterKey{
			Name: "groupId",
			In:   "query",
		}
		if v, ok := packed[key]; ok {
			params.GroupId = v.(OptString)
		}
	}
	return params
}

func decodeGetMyServicesParams(args [0]string, argsEscaped bool, r *http.Request) (params GetMyServicesParams, _ error) {
	q := uri.NewQueryDecoder(r.URL.Query())
	h := uri.NewHeaderDecoder(r.Header)
	// Decode header: ONYXIA-PROJECT.
	if err := func() error {
		cfg := uri.HeaderParameterDecodingConfig{
			Name:    "ONYXIA-PROJECT",
			Explode: false,
		}
		if err := h.HasParam(cfg); err == nil {
			if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotONYXIAPROJECTVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotONYXIAPROJECTVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.ONYXIAPROJECT.SetTo(paramsDotONYXIAPROJECTVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "ONYXIA-PROJECT",
			In:   "header",
			Err:  err,
		}
	}
	// Decode query: groupId.
	if err := func() error {
		cfg := uri.QueryParameterDecodingConfig{
			Name:    "groupId",
			Style:   uri.QueryStyleForm,
			Explode: true,
		}

		if err := q.HasParam(cfg); err == nil {
			if err := q.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotGroupIdVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotGroupIdVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.GroupId.SetTo(paramsDotGroupIdVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "groupId",
			In:   "query",
			Err:  err,
		}
	}
	return params, nil
}
