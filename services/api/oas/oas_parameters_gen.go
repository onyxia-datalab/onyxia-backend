// Code generated by ogen, DO NOT EDIT.

package api

import (
	"net/http"
	"net/url"

	"github.com/go-faster/errors"
	"github.com/ogen-go/ogen/conv"
	"github.com/ogen-go/ogen/middleware"
	"github.com/ogen-go/ogen/ogenerrors"
	"github.com/ogen-go/ogen/uri"
	"github.com/ogen-go/ogen/validate"
)

// GetMyPackageParams is parameters of getMyPackage operation.
type GetMyPackageParams struct {
	// Catalog identifier.
	CatalogId string
	// Package name.
	PackageName string
}

func unpackGetMyPackageParams(packed middleware.Parameters) (params GetMyPackageParams) {
	{
		key := middleware.ParameterKey{
			Name: "catalogId",
			In:   "path",
		}
		params.CatalogId = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "packageName",
			In:   "path",
		}
		params.PackageName = packed[key].(string)
	}
	return params
}

func decodeGetMyPackageParams(args [2]string, argsEscaped bool, r *http.Request) (params GetMyPackageParams, _ error) {
	// Decode path: catalogId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "catalogId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.CatalogId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "catalogId",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: packageName.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "packageName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.PackageName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "packageName",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// InstallServiceParams is parameters of installService operation.
type InstallServiceParams struct {
	// Logical release identifier.
	ReleaseId string
	// Project identifier in Onyxia.
	XOnyxiaProject OptString `json:",omitempty,omitzero"`
}

func unpackInstallServiceParams(packed middleware.Parameters) (params InstallServiceParams) {
	{
		key := middleware.ParameterKey{
			Name: "releaseId",
			In:   "path",
		}
		params.ReleaseId = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "X-Onyxia-Project",
			In:   "header",
		}
		if v, ok := packed[key]; ok {
			params.XOnyxiaProject = v.(OptString)
		}
	}
	return params
}

func decodeInstallServiceParams(args [1]string, argsEscaped bool, r *http.Request) (params InstallServiceParams, _ error) {
	h := uri.NewHeaderDecoder(r.Header)
	// Decode path: releaseId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "releaseId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ReleaseId = c
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    0,
					MaxLengthSet: false,
					Email:        false,
					Hostname:     false,
					Regex:        regexMap["^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"],
				}).Validate(string(params.ReleaseId)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "releaseId",
			In:   "path",
			Err:  err,
		}
	}
	// Decode header: X-Onyxia-Project.
	if err := func() error {
		cfg := uri.HeaderParameterDecodingConfig{
			Name:    "X-Onyxia-Project",
			Explode: false,
		}
		if err := h.HasParam(cfg); err == nil {
			if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotXOnyxiaProjectVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotXOnyxiaProjectVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.XOnyxiaProject.SetTo(paramsDotXOnyxiaProjectVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "X-Onyxia-Project",
			In:   "header",
			Err:  err,
		}
	}
	return params, nil
}

// SchemasCatalogIdPackageNamePackageNameVersionsVersionGetParams is parameters of GET /schemas/{catalogId}/packageName/{packageName}/versions/{version} operation.
type SchemasCatalogIdPackageNamePackageNameVersionsVersionGetParams struct {
	// Catalog identifier.
	CatalogId string
	// Package name.
	PackageName string
	// Package version (semver).
	Version string
}

func unpackSchemasCatalogIdPackageNamePackageNameVersionsVersionGetParams(packed middleware.Parameters) (params SchemasCatalogIdPackageNamePackageNameVersionsVersionGetParams) {
	{
		key := middleware.ParameterKey{
			Name: "catalogId",
			In:   "path",
		}
		params.CatalogId = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "packageName",
			In:   "path",
		}
		params.PackageName = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "version",
			In:   "path",
		}
		params.Version = packed[key].(string)
	}
	return params
}

func decodeSchemasCatalogIdPackageNamePackageNameVersionsVersionGetParams(args [3]string, argsEscaped bool, r *http.Request) (params SchemasCatalogIdPackageNamePackageNameVersionsVersionGetParams, _ error) {
	// Decode path: catalogId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "catalogId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.CatalogId = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "catalogId",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: packageName.
	if err := func() error {
		param := args[1]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[1])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "packageName",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.PackageName = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "packageName",
			In:   "path",
			Err:  err,
		}
	}
	// Decode path: version.
	if err := func() error {
		param := args[2]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[2])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "version",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.Version = c
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "version",
			In:   "path",
			Err:  err,
		}
	}
	return params, nil
}

// WatchReleaseParams is parameters of watchRelease operation.
type WatchReleaseParams struct {
	// Logical release identifier.
	ReleaseId string
	// Resume SSE from a specific event id (client reconnection).
	LastEventID OptString `json:",omitempty,omitzero"`
}

func unpackWatchReleaseParams(packed middleware.Parameters) (params WatchReleaseParams) {
	{
		key := middleware.ParameterKey{
			Name: "releaseId",
			In:   "path",
		}
		params.ReleaseId = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "Last-Event-Id",
			In:   "header",
		}
		if v, ok := packed[key]; ok {
			params.LastEventID = v.(OptString)
		}
	}
	return params
}

func decodeWatchReleaseParams(args [1]string, argsEscaped bool, r *http.Request) (params WatchReleaseParams, _ error) {
	h := uri.NewHeaderDecoder(r.Header)
	// Decode path: releaseId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "releaseId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ReleaseId = c
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    0,
					MaxLengthSet: false,
					Email:        false,
					Hostname:     false,
					Regex:        regexMap["^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"],
				}).Validate(string(params.ReleaseId)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "releaseId",
			In:   "path",
			Err:  err,
		}
	}
	// Decode header: Last-Event-Id.
	if err := func() error {
		cfg := uri.HeaderParameterDecodingConfig{
			Name:    "Last-Event-Id",
			Explode: false,
		}
		if err := h.HasParam(cfg); err == nil {
			if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLastEventIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLastEventIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LastEventID.SetTo(paramsDotLastEventIDVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "Last-Event-Id",
			In:   "header",
			Err:  err,
		}
	}
	return params, nil
}

// WatchResourcesParams is parameters of watchResources operation.
type WatchResourcesParams struct {
	// Logical release identifier.
	ReleaseId string
	// Resume SSE from a specific event id (client reconnection).
	LastEventID OptString `json:",omitempty,omitzero"`
}

func unpackWatchResourcesParams(packed middleware.Parameters) (params WatchResourcesParams) {
	{
		key := middleware.ParameterKey{
			Name: "releaseId",
			In:   "path",
		}
		params.ReleaseId = packed[key].(string)
	}
	{
		key := middleware.ParameterKey{
			Name: "Last-Event-Id",
			In:   "header",
		}
		if v, ok := packed[key]; ok {
			params.LastEventID = v.(OptString)
		}
	}
	return params
}

func decodeWatchResourcesParams(args [1]string, argsEscaped bool, r *http.Request) (params WatchResourcesParams, _ error) {
	h := uri.NewHeaderDecoder(r.Header)
	// Decode path: releaseId.
	if err := func() error {
		param := args[0]
		if argsEscaped {
			unescaped, err := url.PathUnescape(args[0])
			if err != nil {
				return errors.Wrap(err, "unescape path")
			}
			param = unescaped
		}
		if len(param) > 0 {
			d := uri.NewPathDecoder(uri.PathDecoderConfig{
				Param:   "releaseId",
				Value:   param,
				Style:   uri.PathStyleSimple,
				Explode: false,
			})

			if err := func() error {
				val, err := d.DecodeValue()
				if err != nil {
					return err
				}

				c, err := conv.ToString(val)
				if err != nil {
					return err
				}

				params.ReleaseId = c
				return nil
			}(); err != nil {
				return err
			}
			if err := func() error {
				if err := (validate.String{
					MinLength:    1,
					MinLengthSet: true,
					MaxLength:    0,
					MaxLengthSet: false,
					Email:        false,
					Hostname:     false,
					Regex:        regexMap["^[a-z0-9]([-a-z0-9]*[a-z0-9])?$"],
				}).Validate(string(params.ReleaseId)); err != nil {
					return errors.Wrap(err, "string")
				}
				return nil
			}(); err != nil {
				return err
			}
		} else {
			return validate.ErrFieldRequired
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "releaseId",
			In:   "path",
			Err:  err,
		}
	}
	// Decode header: Last-Event-Id.
	if err := func() error {
		cfg := uri.HeaderParameterDecodingConfig{
			Name:    "Last-Event-Id",
			Explode: false,
		}
		if err := h.HasParam(cfg); err == nil {
			if err := h.DecodeParam(cfg, func(d uri.Decoder) error {
				var paramsDotLastEventIDVal string
				if err := func() error {
					val, err := d.DecodeValue()
					if err != nil {
						return err
					}

					c, err := conv.ToString(val)
					if err != nil {
						return err
					}

					paramsDotLastEventIDVal = c
					return nil
				}(); err != nil {
					return err
				}
				params.LastEventID.SetTo(paramsDotLastEventIDVal)
				return nil
			}); err != nil {
				return err
			}
		}
		return nil
	}(); err != nil {
		return params, &ogenerrors.DecodeParamError{
			Name: "Last-Event-Id",
			In:   "header",
			Err:  err,
		}
	}
	return params, nil
}
